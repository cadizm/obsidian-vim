/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => VimCtrlDPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var VimCtrlDPlugin = class extends import_obsidian.Plugin {
  registerCtrlDHandlers() {
    const eventHandler = (event) => {
      handleKeydown(event, this.app);
    };
    document.querySelectorAll(".cm-content").forEach((element) => {
      if (!this.handlerMap.has(element)) {
        console.log("Registering event handler for", element.getText());
        this.registerDomEvent(element, "keydown", eventHandler);
        this.handlerMap.set(element, true);
      }
    });
  }
  async onload() {
    console.log("Loading VimCtrlDPlugin ");
    this.handlerMap = /* @__PURE__ */ new Map();
    this.app.workspace.onLayoutReady(() => {
      this.registerInterval(window.setInterval(() => this.registerCtrlDHandlers(), 2 * 1e3));
    });
  }
  onunload() {
    console.log("Unloading VimCtrlDPlugin ");
    this.handlerMap.clear();
  }
};
var handleKeydown = (event, app) => {
  var _a, _b, _c, _d;
  if (!(event instanceof KeyboardEvent)) {
    return;
  }
  if (event.ctrlKey && event.code == "KeyD") {
    const view = app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    const editor = view == null ? void 0 : view.editor;
    if (!editor) {
      return;
    }
    const vimMode = app.vault.getConfig("vimMode");
    const insertMode = (_d = (_c = (_b = (_a = editor == null ? void 0 : editor.cm) == null ? void 0 : _a.cm) == null ? void 0 : _b.state) == null ? void 0 : _c.vim) == null ? void 0 : _d.insertMode;
    if (!vimMode || !insertMode) {
      return;
    }
    const lastLine = editor.lastLine();
    const lastCh = editor.getLine(lastLine).length;
    const curPos = editor.getCursor();
    const nextPos = {
      line: curPos.line,
      ch: curPos.ch + 1
    };
    if (curPos.line == lastLine && nextPos.ch > lastCh) {
      return;
    }
    editor.replaceRange("", curPos, nextPos);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBNYXJrZG93blZpZXcsIFBsdWdpbiB9IGZyb20gJ29ic2lkaWFuJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmltQ3RybERQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xuICBoYW5kbGVyTWFwOiBNYXA8SFRNTEVsZW1lbnQsIGJvb2xlYW4+O1xuXG4gIHJlZ2lzdGVyQ3RybERIYW5kbGVycygpIHtcbiAgICBjb25zdCBldmVudEhhbmRsZXIgPSAoZXZlbnQ6IEV2ZW50KSA9PiB7XG4gICAgICBoYW5kbGVLZXlkb3duKGV2ZW50LCB0aGlzLmFwcCk7XG4gICAgfTtcblxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jbS1jb250ZW50JykuZm9yRWFjaCgoZWxlbWVudDogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgIGlmICghdGhpcy5oYW5kbGVyTWFwLmhhcyhlbGVtZW50KSkge1xuICAgICAgICBjb25zb2xlLmxvZygnUmVnaXN0ZXJpbmcgZXZlbnQgaGFuZGxlciBmb3InLCBlbGVtZW50LmdldFRleHQoKSk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJEb21FdmVudChlbGVtZW50LCAna2V5ZG93bicsIGV2ZW50SGFuZGxlcik7XG4gICAgICAgIHRoaXMuaGFuZGxlck1hcC5zZXQoZWxlbWVudCwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBhc3luYyBvbmxvYWQoKSB7XG4gICAgY29uc29sZS5sb2coJ0xvYWRpbmcgVmltQ3RybERQbHVnaW4gJyk7XG4gICAgdGhpcy5oYW5kbGVyTWFwID0gbmV3IE1hcCgpO1xuXG4gICAgdGhpcy5hcHAud29ya3NwYWNlLm9uTGF5b3V0UmVhZHkoKCkgPT4ge1xuICAgICAgLy8gUmVnaXN0ZXJpbmcgaW50ZXJ2YWwgY2xlYXJzIGl0IG9uIHVuTG9hZCgpXG4gICAgICB0aGlzLnJlZ2lzdGVySW50ZXJ2YWwod2luZG93LnNldEludGVydmFsKCgpID0+IHRoaXMucmVnaXN0ZXJDdHJsREhhbmRsZXJzKCksIDIgKiAxMDAwKSk7XG4gICAgfSk7XG4gIH1cblxuICBvbnVubG9hZCgpIHtcbiAgICBjb25zb2xlLmxvZygnVW5sb2FkaW5nIFZpbUN0cmxEUGx1Z2luICcpO1xuICAgIHRoaXMuaGFuZGxlck1hcC5jbGVhcigpO1xuICB9XG59XG5cbmNvbnN0IGhhbmRsZUtleWRvd24gPSAoZXZlbnQ6IEV2ZW50LCBhcHA6IEFwcCkgPT4ge1xuICBpZiAoIShldmVudCBpbnN0YW5jZW9mIEtleWJvYXJkRXZlbnQpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGV2ZW50LmN0cmxLZXkgJiYgZXZlbnQuY29kZSA9PSAnS2V5RCcpIHtcbiAgICBjb25zdCB2aWV3ID0gYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldyk7XG4gICAgY29uc3QgZWRpdG9yID0gdmlldz8uZWRpdG9yO1xuXG4gICAgaWYgKCFlZGl0b3IpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gZ2V0Q29uZmlnIG5vdCBwYXJ0IG9mIHB1YmxpYyBhcGlcbiAgICBjb25zdCB2aW1Nb2RlID0gYXBwLnZhdWx0LmdldENvbmZpZygndmltTW9kZScpO1xuXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIGZvdW5kIGluc2VydE1vZGUgdGhyb3VnaCBleHBlcmltZW50YXRpb25cbiAgICBjb25zdCBpbnNlcnRNb2RlID0gZWRpdG9yPy5jbT8uY20/LnN0YXRlPy52aW0/Lmluc2VydE1vZGU7XG5cbiAgICBpZiAoIXZpbU1vZGUgfHwgIWluc2VydE1vZGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBsYXN0TGluZSA9IGVkaXRvci5sYXN0TGluZSgpO1xuICAgIGNvbnN0IGxhc3RDaCA9IGVkaXRvci5nZXRMaW5lKGxhc3RMaW5lKS5sZW5ndGg7XG5cbiAgICBjb25zdCBjdXJQb3MgPSBlZGl0b3IuZ2V0Q3Vyc29yKCk7XG4gICAgY29uc3QgbmV4dFBvcyA9IHtcbiAgICAgIGxpbmU6IGN1clBvcy5saW5lLFxuICAgICAgY2g6IGN1clBvcy5jaCArIDEsXG4gICAgfTtcblxuICAgIGlmIChjdXJQb3MubGluZSA9PSBsYXN0TGluZSAmJiBuZXh0UG9zLmNoID4gbGFzdENoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gZGVsZXRlIG5leHQgY2hhclxuICAgIGVkaXRvci5yZXBsYWNlUmFuZ2UoJycsIGN1clBvcywgbmV4dFBvcyk7XG4gIH1cbn07XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBQTBDO0FBRTFDLElBQXFCLGlCQUFyQixjQUE0Qyx1QkFBTztBQUFBLEVBR2pELHdCQUF3QjtBQUN0QixVQUFNLGVBQWUsQ0FBQyxVQUFpQjtBQUNyQyxvQkFBYyxPQUFPLEtBQUssR0FBRztBQUFBLElBQy9CO0FBRUEsYUFBUyxpQkFBaUIsYUFBYSxFQUFFLFFBQVEsQ0FBQyxZQUF5QjtBQUN6RSxVQUFJLENBQUMsS0FBSyxXQUFXLElBQUksT0FBTyxHQUFHO0FBQ2pDLGdCQUFRLElBQUksaUNBQWlDLFFBQVEsUUFBUSxDQUFDO0FBQzlELGFBQUssaUJBQWlCLFNBQVMsV0FBVyxZQUFZO0FBQ3RELGFBQUssV0FBVyxJQUFJLFNBQVMsSUFBSTtBQUFBLE1BQ25DO0FBQUEsSUFDRixDQUFDO0FBQUEsRUFDSDtBQUFBLEVBRUEsTUFBTSxTQUFTO0FBQ2IsWUFBUSxJQUFJLHlCQUF5QjtBQUNyQyxTQUFLLGFBQWEsb0JBQUksSUFBSTtBQUUxQixTQUFLLElBQUksVUFBVSxjQUFjLE1BQU07QUFFckMsV0FBSyxpQkFBaUIsT0FBTyxZQUFZLE1BQU0sS0FBSyxzQkFBc0IsR0FBRyxJQUFJLEdBQUksQ0FBQztBQUFBLElBQ3hGLENBQUM7QUFBQSxFQUNIO0FBQUEsRUFFQSxXQUFXO0FBQ1QsWUFBUSxJQUFJLDJCQUEyQjtBQUN2QyxTQUFLLFdBQVcsTUFBTTtBQUFBLEVBQ3hCO0FBQ0Y7QUFFQSxJQUFNLGdCQUFnQixDQUFDLE9BQWMsUUFBYTtBQW5DbEQ7QUFvQ0UsTUFBSSxFQUFFLGlCQUFpQixnQkFBZ0I7QUFDckM7QUFBQSxFQUNGO0FBRUEsTUFBSSxNQUFNLFdBQVcsTUFBTSxRQUFRLFFBQVE7QUFDekMsVUFBTSxPQUFPLElBQUksVUFBVSxvQkFBb0IsNEJBQVk7QUFDM0QsVUFBTSxTQUFTLDZCQUFNO0FBRXJCLFFBQUksQ0FBQyxRQUFRO0FBQ1g7QUFBQSxJQUNGO0FBR0EsVUFBTSxVQUFVLElBQUksTUFBTSxVQUFVLFNBQVM7QUFHN0MsVUFBTSxjQUFhLHdEQUFRLE9BQVIsbUJBQVksT0FBWixtQkFBZ0IsVUFBaEIsbUJBQXVCLFFBQXZCLG1CQUE0QjtBQUUvQyxRQUFJLENBQUMsV0FBVyxDQUFDLFlBQVk7QUFDM0I7QUFBQSxJQUNGO0FBRUEsVUFBTSxXQUFXLE9BQU8sU0FBUztBQUNqQyxVQUFNLFNBQVMsT0FBTyxRQUFRLFFBQVEsRUFBRTtBQUV4QyxVQUFNLFNBQVMsT0FBTyxVQUFVO0FBQ2hDLFVBQU0sVUFBVTtBQUFBLE1BQ2QsTUFBTSxPQUFPO0FBQUEsTUFDYixJQUFJLE9BQU8sS0FBSztBQUFBLElBQ2xCO0FBRUEsUUFBSSxPQUFPLFFBQVEsWUFBWSxRQUFRLEtBQUssUUFBUTtBQUNsRDtBQUFBLElBQ0Y7QUFHQSxXQUFPLGFBQWEsSUFBSSxRQUFRLE9BQU87QUFBQSxFQUN6QztBQUNGOyIsCiAgIm5hbWVzIjogW10KfQo=
